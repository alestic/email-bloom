#!/usr/bin/env python
#
# https://github.com/alestic/email-bloom
#

from __future__ import print_function
import argparse
import sys
from pybloom import ScalableBloomFilter

__version__ = '0.02'


def parse_args(raw_args=None):
    parser = argparse.ArgumentParser(
        description='Compare email address lists using Bloom filter')
    parser.add_argument(
        '-v', '--version',
        action='version',
        version='%(prog)s ' + __version__)
    bloom_group = parser.add_mutually_exclusive_group()
    bloom_group.add_argument(
        '--output-bloom',
        dest='output',
        type=argparse.FileType('w'),
        help="Target file to write Bloom filter (destructive)")
    bloom_group.add_argument(
        '--input-bloom',
        dest='input',
        type=argparse.FileType('r'),
        help="File containing source Bloom filter")
    parser.add_argument(
        '--max-false-positive-rate',
        dest='rate',
        type=float,
        default=0.01,
        help='Max false positive rate (Default 0.01 = 1 percent)')
    parser.add_argument(
        'files',
        metavar='FILENAME',
        nargs='*',
        type=argparse.FileType('r'),
        default=sys.stdin,
        help='Input file(s) with one email address per line')
    args = parser.parse_args(raw_args)
    if not args.output and not args.input:
        parser.error("Please specify --input or --output bloom filter file")
    return args


def canonicalize_email(email_address):
    return email_address.strip().lower()


def write_bloom(output_bloom, false_positive_rate, files):
    bloom = ScalableBloomFilter(
        mode=ScalableBloomFilter.SMALL_SET_GROWTH,
        error_rate=false_positive_rate)
    for email_file in files:
        for line in email_file:
            bloom.add(canonicalize_email(line))
    bloom.tofile(output_bloom)

    
def print_matches(input_bloom, files):
    bloom = ScalableBloomFilter.fromfile(input_bloom)
    for email_file in files:
        for line in email_file:
            if canonicalize_email(line) in bloom:
                print(line, end="")


def main(args):
    if args.output:
        write_bloom(args.output, args.rate, args.files)
    else:
        print_matches(args.input, args.files)


if __name__ == '__main__':
    args = parse_args()
    main(args)
